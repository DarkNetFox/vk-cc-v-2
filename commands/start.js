var get_user = require("../functions/get_user"),
    save_user = require("../functions/save_user"),
    fs = require("fs"),
    generator = require('generate-password');

module.exports = {
	r: /^(.*)$/i,
	f: function (msg, chatId, args, data) {
        fs.access(`./users/${chatId}.json`, function(error) {
            if (error) {
                fs.open(`./users/${chatId}.json`, 'w', (err) => {
                    var file = {
                        name: `–£—á–∞—Å—Ç–Ω–∏–∫ `,
                        edit_name: false,
                        id: chatId,
                        link: "https://vk.com/feed",
                        past_message: 0,
                        hacked_accounts: 0,
                        cells: {
                          lvl: 1,
                          hacked: 0,
                          condition: false
                        },
                        code_pay: generator.generate({length: 10, numbers: false})
                    }

                    fs.writeFile(`./users/${chatId}.json`, JSON.stringify(file), function writeJSON(err) {});
                    return data({
                        text: `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VK FISHING BOT üóΩ</b>\n<i>–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–∑–ª–æ–º–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö ‚ú®</i>`,
                        keyboard: [
                            [{"text": `–ú–æ–∏ —Å—Å—ã–ª–∫–∏ üåê`, callback_data: "link"}],
                            [{"text": `–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —è—á–µ–π–∫–∏ üìÇ`, callback_data: "cells"}],
                            [{"text": "–î—Ä—É–≥–æ–µ ü¶ã", callback_data: "other"}],
                            [{"text": "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª üîç", url: "https://t.me/vk_fishing_bot_news"}]
                        ]
                    });
                })
            } else {
                get_user.start(chatId, (info) => {
                    if(info.edit_name == true) {
                        if(args[1] < 5) {
                            return data({
                                text: `<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚ö†Ô∏è</b>\n<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞ - 5 —Å–∏–º–≤–æ–ª–æ–≤</i>`,
                                keyboard: [[{"text": `–û—Ç–º–µ–Ω–∞ ‚ùå`, callback_data: "canel"}]]
                            });
                        }
                        if(args[1].length > 30) {
                            return data({
                                text: `<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚ö†Ô∏è</b>\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ - 30 —Å–∏–º–≤–æ–ª–æ–≤</i>`,
                                keyboard: [[{"text": `–û—Ç–º–µ–Ω–∞ ‚ùå`, callback_data: "canel"}]]
                            });
                        }

                        info.edit_name = false;
                        info.name = args[1];

                        data({
                            text: `<b>–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ</b>`,
                            keyboard: [[{"text": `‚è™ –ú–µ–Ω—é`, callback_data: "menu"}]]
                        })
                    }
                    if(info.l_edit == true) {
                        if(validateURL(msg.text) == false) {
                            return data({
                                text: `<b>‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚ö†Ô∏è</b>\n<i>–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å—Å—ã–ª–∫–æ–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</i>`,
                                keyboard: [[{"text": `–û—Ç–º–µ–Ω–∞ ‚ùå`, callback_data: "canel"}]]
                            });
                        }
                        info.link = args[1];
                        data({
                            text: `<b>–°—Å—ã–ª–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ</b>`,
                            keyboard: [[{"text": `‚è™ –ú–µ–Ω—é`, callback_data: "menu"}]]
                        });
                    }
                    return save_user.start(chatId, info);
                });
            }
        });
	},
	desc: "",
	rights: 0,
	type: "all"
}

function validateURL(textval) {
    var urlregex = new RegExp("^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*$");
    return urlregex.test(textval);
  }